Texture2D tex : register(t0);
Texture2D normalMap : register(t1);    
Texture2D shadowMap : register(t2); // 阴影贴图
SamplerState samplerLinear : register(s0);
SamplerComparisonState shadowSampler : register(s1); // 用于深度比较的采样器

cbuffer LightBuffer
{
    float3 lightDirection;
    float3 lightColour;
};

struct PS_INPUT
{
    float4 Pos : SV_POSITION;
    float3 Normal : NORMAL;
    float3 Tangent : TANGENT;
    float3 Binormal : BINORMAL;
    float2 TexCoords : TEXCOORD;
    float4 LightSpacePos : TEXCOORD1;
};

static const float PI = 3.14159265359;

float4 PS(PS_INPUT input) : SV_Target
{
    float3 mapNormal = normalMap.Sample(samplerLinear, input.TexCoords).xyz;
    mapNormal = normalize(mapNormal * 2.0f - 1.0f);
    float3x3 TBN = float3x3(input.Tangent, input.Binormal, input.Normal);
    mapNormal = normalize(mul(mapNormal, TBN));

    float4 albedo = tex.Sample(samplerLinear, input.TexCoords);
    if (albedo.a < 0.5)
    {
        discard;
    }

    float3 lightDir = normalize(lightDirection);

    // 计算阴影
    float shadow = shadowMap.SampleCmpLevelZero(shadowSampler, input.LightSpacePos.xy / input.LightSpacePos.w, input.LightSpacePos.z / input.LightSpacePos.w - 0.005);

    // 环境光和漫反射
    float3 ambient = float3(0.2, 0.2, 0.2);
    float3 diffuse = (albedo.rgb / PI) * lightColour * max(dot(mapNormal, lightDir), 0.0) * shadow;

    return float4(diffuse + ambient, 1.0);
}
