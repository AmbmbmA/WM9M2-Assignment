Texture2D tex : register(t0);
Texture2D normalMap : register(t1);    
SamplerState samplerLinear : register(s0);

cbuffer LightBuffer
{
    float3 lightDirection; 
    float3 lightColour;     
}

struct PS_INPUT
{
	float4 Pos : SV_POSITION;
	float3 Normal : NORMAL;
	float3 Tangent : TANGENT;
	float2 TexCoords : TEXCOORD;
    	float3 Binormal : BINORMAL;

};


float4 PS(PS_INPUT input) : SV_Target0
{

	float3 mapNormal = normalMap.Sample(samplerLinear, input.TexCoords).xyz;
	mapNormal = normalize(mapNormal * 2.0f - 1.0f);
	
	float3x3 TBN = float3x3(input.Tangent, input.Binormal, input.Normal);
	
	mapNormal = normalize(mul(mapNormal, TBN));
	

   	 float4 albedo;
   	 albedo = tex.Sample(samplerLinear, input.TexCoords);
   	 if (albedo.a < 0.5)
   	 {
   	     discard;
   	 }
	
	float3 lightDir = normalize(lightDirection);

	float3 ambient = (0.3,0.3,0.3);

	float3 normFactor = pow(max(dot(mapNormal, lightDir), 0.0), 3);
	float3 normFactora = pow(min (1 + dot(mapNormal, float3(0, 1, 0)),1), 2);

	float3 ambientLight = ambient * normFactora;
	float3 diffuse = (albedo.rgb) * (lightColour *normFactor + ambientLight) ;
	
    return float4(diffuse, 1.0);
}
